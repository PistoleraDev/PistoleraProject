<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_mobile</parentName>
  <maskName>spr_bullet</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>initialise</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
start_x=x;
start_y=y;
firing_inst=noone;
faction_id=0;
prepause_speed=0;
hit_detected=false;
penetrations=0;
ricochets=0;
max_death_countdown=2;
death_countdown=max_death_countdown;
damage=1;
range=100;
_speed=0;
knockback=0;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>immediate check for wall collission</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var inst_wall= instance_position(x,y,obj_barrier_solid);
    
    if !(inst_wall==noone)
    {
        hit_detected=true;
        _speed=0;
    }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>reach end of range</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var distance_travelled=point_distance(start_x,start_y,x,y);

if distance_travelled&gt;range
{
hit_detected=true;
_speed=0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>clearup after hit detected</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if hit_detected
    {
        if death_countdown&gt;0
        {
        death_countdown-=1*global.delta;
        }
        else
        {
        instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>collission and speed</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !hit_detected
{
    if !pause
    {
        var d_x=lengthdir_x(_speed,direction);
        var d_y=lengthdir_y(_speed,direction);
        inst_wall=collision_line(x,y,x+d_x,y+d_y,obj_barrier_solid,false,false);
        if !(inst_wall==noone)
        {
        var precision=ceil(_speed/6);
            if _speed&gt;0
            {
                for (var i=0;i&lt;=precision;i++)
                {
                x+=(d_x/precision);
                y+=(d_y/precision);
                    if instance_position(x,y,obj_barrier_solid)
                    {
                    break;
                    }
                }
            }
               //RICOCHETS 
                if ricochets&gt;0
                {
                    if object_index==obj_bullet
                    {
                    var pos= nearest_emptyspot_square(x,y,inst_wall.sprite_width/2)
    
                    var inst_new=instance_create(x,y,object_index);
                    switch pos[2]
                        {
                        case 'left':
                        inst_new.direction=180-direction;
                        break;
                        case 'right':
                        inst_new.direction=180-direction;
                        break;
                        case 'up':
                        inst_new.direction=360-direction;
                        break;
                        case 'down':
                        inst_new.direction=360-direction;
                        break;
                        }
                        inst_new.ricochets=ricochets-1;
                        inst_new._speed=_speed;
                        inst_new.faction_id=faction_id;
                        inst_new.range=range;
                        while !place_free(inst_new.x,inst_new.y)
                        {
                        inst_new.x+=lengthdir_x(inst_new._speed,inst_new.direction);
                        inst_new.y+=lengthdir_y(inst_new._speed,inst_new.direction);
                        }
                    inst_new.hit_detected=false;
                    inst_new.start_x=x;
                    inst_new.start_y=y; 
                    inst_new.knockback=knockback;
                    inst_new.damage=damage;
                    _speed=0
                    hit_detected=true;
                    }
                    else if object_index==obj_tossedgun
                    {
                    var pos= nearest_emptyspot_square(x,y,inst_wall.sprite_width/2)
    
                    switch pos[2]
                        {
                        case 'left':
                        direction=180-direction;
                        break;
                        case 'right':
                        direction=180-direction;
                        break;
                        case 'up':
                        direction=360-direction;
                        break;
                        case 'down':
                        direction=360-direction;
                        break;
                        }
                        ricochets=ricochets-1;
                        initial_speed=_speed;
                        initial_rot_speed=-rot_speed;
                        range=range-point_distance(x,y,start_x,start_y);
                        while !place_free(x,y)
                        {
                        x+=lengthdir_x(_speed,direction);
                        y+=lengthdir_y(_speed,direction);
                        }
                    hit_detected=false;
                    start_x=x;
                    start_y=y; 
                    }
                }
                else
                {
                hit_detected = true;
                }
                



        }

        if !hit_detected
        {
        x+=lengthdir_x(_speed,direction);
        y+=lengthdir_y(_speed,direction);
        }
    }



}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
