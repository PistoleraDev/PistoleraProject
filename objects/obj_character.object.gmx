<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bluetest</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_mobile</parentName>
  <maskName>spr_character_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Initialise</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

control='player';
// none=no process controls this, auto= AI controls this, player= player controls this, cinematic= cinematic logic controls this


walk_speed=5; //maximum speed while walking.


character_index=0; //index to be grabbed from a stats list to populate values


anim_countdown=-1; //countdown of animation. a value of -1 means animation starts initiliased.

anim_variant=1; //number that indicates what variant of an animation should be used, to allow for different animations.


faction_id=1; //faction for the character. Characters in same faction cannot hurt or target each other.

character_id='debug_character'; //defines which character this is, e.g. luiza, spaniard musketeer..


rotation_smoothing=0.3;//movement smoothing variable;

hitpoints=1;

grace_period=0; //prevents a further check for melee damage within X seconds.

weapon_mode='gun'; //weapon mode variable to allow switching between melee and guns

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>add attachments</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inst_body=instance_create(x,y,obj_character_body);

inst_body.attach_point_x=0;
inst_body.attach_point_y=0;
inst_body.inst_parent=id;

inst_head=instance_create(x,y,obj_character_head);

inst_head.attach_point_x=0;
inst_head.attach_point_y=0;
inst_head.inst_parent=inst_body;

inst_hat=instance_create(x,y,obj_character_hat);

inst_hat.attach_point_x=0;
inst_hat.attach_point_y=0;
inst_hat.inst_parent=inst_head;

inst_armL=instance_create(x,y,obj_character_armL);

inst_armL.attach_point_x=0;
inst_armL.attach_point_y=-19;
inst_armL.inst_parent=inst_body;

inst_armR=instance_create(x,y,obj_character_armR);

inst_armR.attach_point_x=0;
inst_armR.attach_point_y=20;
inst_armR.inst_parent=inst_body;

inst_weaponL=instance_create(x,y,obj_character_weaponL);

inst_weaponL.attach_point_x=20;
inst_weaponL.attach_point_y=0;
inst_weaponL.inst_parent=inst_armL;

inst_weaponR=instance_create(x,y,obj_character_weaponR);

inst_weaponR.attach_point_x=20;
inst_weaponR.attach_point_y=0;
inst_weaponR.inst_parent=inst_armR;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Inventory</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//array for storing the character's equpped firearms
firearm_inventory=0;
max_firearm_inventory_length=8; //holds the amount of firearms that a character can have.
//index 0= firearm_id, 1=shots remaining 2=length of firearm.




/*- todo: add a structure for loading inventory for non-player characters*/
//todo add a structure for loading the player's inventory from global.
//debug: add flintlocks to firearm_inventory todo: remove
/*
for (var i=0; i&lt;max_firearm_inventory_length;i++)
{*/
firearm_inventory_adddefault(0);
firearm_inventory_adddefault(1);
firearm_inventory_adddefault(0);
firearm_inventory_adddefault(1);
firearm_inventory_adddefault(0);
/*
}*/


melee_inventory=0;
max_melee_inventory_length=1;

//todo: start here, implement melee inventory
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Firing Modifiers and variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>max_draw_duration=room_speed/16; //defines how quickly a character draws their weapon.

draw_duration=max_draw_duration;  //defines how quickly a character draws their weapon.


shoot_substate='both'; // both, left, right, full

firing_L=false;
firing_R=false; //variables for allowing firing of guns to not be spammed

firearm_L=create_array(-1,0);
firearm_R=create_array(-1,0); //holds the firearms that are being held in hand.

fire_delay_R=0; //a timer variable that adds a delay when firing akimbo, for 'coolness factor'

reload_style='toss'; // this handles whether the character tosses their weapon or re-adds it to inventory after firing.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Melee variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
melee_direction=0;

max_melee_speed=15; //speed while performing a melee attack

melee_speed=0;

melee_duration=room_speed/4; //amount of steps for a melee attack to complete

inst_melee_hitbox=noone; //instance that refers to a hitbox instance

melee_input_held=false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Dodge Variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
dodge_direction=0; //angle for character to dodge toward

dodge_speed=15; //maximum speed while dodging

max_dodge_duration=room_speed/2; //amount of steps for a dodge to complete.

//dodge_duration=0; //countdown for the end of an initialised dodge OBSOLETE

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Knockback variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>knockback_counter=0; //knockback is counted in units of room_speed, and is drained as such. 
stun_threshold=0.5*room_speed; //this is the threshold where the stunned state takes effect. (one second worth of stun)
stun_max=1*room_speed; //maximum that the knockback counter can rise to.
knockback_speed=0; //a speed modifier

knockback_dir=0;    //the matching direction modifier.
weight_modifier=power(0.9,(240/room_speed)); //resistance to knockback modifier
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>skill modifiers</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
shootakimbo=false;

ricochet_modifier=0; //adds the number of ricochets by this. Most weapons have default ricochet of 1


//todo: check and implement these skill modifiers
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>AI behaviour variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>InWeaponRange=false;
NoAmmo=false;
PrioritiseMelee=false;
SeekCover=false;
DodgeReady=false;
Defend_x = -1;
Defend_y = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timeouts</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>maxAIShootDelay=room_speed/2;
AIShootDelay= maxAIShootDelay; //time an AI will take to aim before firing
maxAIMeleeDelay=room_speed;
AIMeleeDelay= 0; //time an AI will take between melee attacks
//todo, these should probably be enemy stats.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>throttles</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>maxCoverThrottle=room_speed/3;
coverThrottle=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inherit event</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Player controls -&gt; Action triggers</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if !dead
    {
        if control=='player'
        {
            if canDodge() 
            {
                if check_move_dodge()
                {
                action_trigger='dodge';
                }
            }
            if canReload()
            {
                if  check_action_reload_pressed()
                {
                action_trigger='reload';
                }
            }
            if canFire()
            {
                if !check_action_weapon()
                {
                action_trigger='fire';
                }
            }
            if canDrawFirearm()
            {
                if weapon_mode=='gun'
                {
                    if check_action_weapon()
                    {
                    action_trigger='draw';
                    }
                }
            }
            if canMelee()
            {
                if weapon_mode=='melee'
                {
                    if (check_action_weapon() &amp;&amp; !melee_input_held) 
                    {
                    action_trigger='melee';
                    }
                    if (!check_action_weapon() &amp;&amp; melee_input_held)
                    {
                    melee_input_held=false;
                    }
                }
            }
        
        }
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Inherit</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Motion</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Walking State (AI) (Path)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if control=='ai'
    {
            //moveToTarget(move_target);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Walking State (Player) (Speed)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{

        if movement_state=='walking'
        {
            max_speed=walk_speed;
            if control=='player'
            {
                if (check_move_left())
                {
                    xspeed-=120/room_speed;
                }
                if (check_move_right())
                {
                    xspeed+=120/room_speed;
                }
                if (check_move_up())
                {
                    yspeed-=120/room_speed;
                }
                if (check_move_down())
                {
                    yspeed+=120/room_speed;
                }
                
                /* activate this to have opposite keys cancel each other out
                if (check_move_left())&amp;&amp; (check_move_right())
                {
                    if abs(xspeed)&gt;0
                    {
                        xspeed-=min(120/room_speed,abs(xspeed))*(xspeed/abs(xspeed));
                    }
                }
                if (check_move_up())&amp;&amp; (check_move_down())
                {
                    if abs(yspeed)&gt;0
                    {
                        yspeed-=min(120/room_speed,abs(yspeed))*(yspeed/abs(yspeed))
                    }
                }
                */
                
            }   
        }
  
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Speed (General)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
            if control=='player'
            {
                if abs(xspeed)&gt;0 &amp;&amp; !(check_move_left() || check_move_right())
                {
    
                    xspeed*=weight_modifier; 
    
                }
                if abs(yspeed)&gt;0 &amp;&amp; !(check_move_up() || check_move_down())
                {
    
                    yspeed*=weight_modifier;
    
                }
            }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Speed To Movement (General)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{   
        
    if abs(xspeed)&lt;0.1
    {
    xspeed=0;
    }
    if abs(yspeed)&lt;0.1
    {
    yspeed=0;
    }
    if abs(xspeed)&gt;max_speed
    {
    xspeed=max_speed*(xspeed/abs(xspeed));
    }
    if abs(yspeed)&gt;max_speed
    {
    yspeed=max_speed*(yspeed/abs(yspeed));
    }

    var pre_xspeed=xspeed;
    var pre_yspeed=yspeed;
    if knockback_speed&lt;&gt;0
    {
        xspeed+=lengthdir_x(knockback_speed,knockback_dir);
        yspeed+=lengthdir_y(knockback_speed,knockback_dir);
    }
    if melee_speed&lt;&gt;0
    {
            xspeed=lengthdir_x(melee_speed,melee_direction);
            yspeed=lengthdir_y(melee_speed,melee_direction);     
    }
    
    if (xspeed!=0)||(yspeed!=0)
    {
    cellsize=global.path_grid_cellsize;
    }
    if (xspeed!=0)
    {
        dir=(xspeed/abs(xspeed)); //indicates polarity of xspeed
        i=abs(xspeed);
        while i&gt;0
        {
            if 0==mp_grid_get_cell(global.path_grid,(x+(6*dir)) div cellsize,(y) div cellsize)
            {
            x+=1*(60/room_speed)*dir;
            }
            else if 0==mp_grid_get_cell(global.path_grid,(x+(6*dir)) div cellsize,(y+6) div cellsize)
            {
            y+=1*(60/room_speed);
            }
            else if 0==mp_grid_get_cell(global.path_grid,(x+(6*dir)) div cellsize,(y-6) div cellsize)
            {
            y-=1*(60/room_speed)
            }
        i-=1;
        }
    }
    if (yspeed!=0)
    {
        dir=(yspeed/abs(yspeed)); //indicates polarity of xspeed
        i=abs(yspeed);
        while i&gt;0
        {
            if 0==mp_grid_get_cell(global.path_grid,(x) div cellsize,(y+(6*dir)) div cellsize)
            {
            y+=1*(60/room_speed)*dir;
            }
            else if 0==mp_grid_get_cell(global.path_grid,(x+6) div cellsize,(y+(6*dir)) div cellsize)
            {
            x+=1*(60/room_speed);
            }
            else if 0==mp_grid_get_cell(global.path_grid,(x-6) div cellsize,(y+(6*dir)) div cellsize)
            {
            x-=1*(60/room_speed);
            }
        i-=1;
        }
    }
    
    xspeed=pre_xspeed;
    yspeed=pre_yspeed;

}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Rotation</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if control=='player'
    {
    
        //todo may need to adjust this for different states
        //can cause some animation trouble, though...
        if action_state&lt;&gt;'dead' &amp;&amp; action_state&lt;&gt;'meleeing' &amp;&amp; action_state&lt;&gt;'dodging'
        {
        instance_tend_to_spriteangle(id,point_direction(x,y,mouse_x,mouse_y),rotation_smoothing);
        }
    }
    
    //todo: need to create rotation clause for AI character

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Movement State Changes</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Enter Walking State (Player)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if control=='player'
    {
        if movement_state=='idle' &amp;&amp; ( check_move_any())
        {
            movement_state='walking';
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Enter Walking State (AI)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !dead
{
    if !pause
    {
        if control=='ai'
        {
            if movement_state=='idle' &amp;&amp; move_target&lt;&gt;noone
            {
                movement_state='walking';
            }
        
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Dodging</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Dodging State (general)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if movement_state=='dodging'
    {
        if path_exists(path)
        {
        path_clear_points(path);
        } 
        
        max_speed=dodge_speed;
        xspeed=lengthdir_x(max_speed,dodge_direction);
        yspeed=lengthdir_y(max_speed,dodge_direction);

            var dodge_complete=false;
            var dodge_variant=anim_variant
            var in_dodge_duration=max_dodge_duration;
            with inst_body {dodge_complete=!anim_dodge_variant('body',in_dodge_duration,false,dodge_variant);}
            with inst_armR {anim_dodge_variant('armR',in_dodge_duration,false,dodge_variant);}
            with inst_armL {anim_dodge_variant('armL',in_dodge_duration,false,dodge_variant);}
            with inst_weaponR {anim_dodge_variant('weaponR',in_dodge_duration,false,dodge_variant);}
            with inst_weaponL {anim_dodge_variant('weaponL',in_dodge_duration,false,dodge_variant);}
            with inst_head {anim_dodge_variant('head',in_dodge_duration,false,dodge_variant);}
            with inst_hat {anim_dodge_variant('hat',in_dodge_duration,false,dodge_variant);}

        if dodge_complete
        {
            movement_state='idle';
            action_state='idle';
            inst_body.anim_countdown=-1;
            inst_armR.anim_countdown=-1;
            inst_armL.anim_countdown=-1;
            inst_head.anim_countdown=-1;
            inst_weaponL.anim_countdown=-1;
            inst_weaponR.anim_countdown=-1;
            inst_hat.anim_countdown=-1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Enter Dodging State (General)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if canDodge()
    {
        if (action_trigger='dodge')
        {
 

            with inst_body {anim_countdown=-1;}
            with inst_armR {anim_countdown=-1;}
            with inst_armL {anim_countdown=-1;}
            with inst_weaponR {anim_countdown=-1;}
            with inst_weaponL {anim_countdown=-1;}
            with inst_head {anim_countdown=-1;}
            with inst_hat {anim_countdown=-1;}
            
            movement_state='dodging';
            action_state='dodging';
            action_trigger='';
                if xspeed!=0||yspeed!=0
                {
                dodge_direction=point_direction(0,0,xspeed,yspeed);
                }
                else
                {
                dodge_direction=spriteangle+ random_range(-180,180);
                }
            anim_variant=ceil(random(2));
            //dodge_duration=max_dodge_duration; //OBSOLETE
            }
        }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Reloading State</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enter reloading state</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if canReload()
    {
            //todo: clause to check if firearm_inventory is empty
            //todo: clause if character is using gun or melee, clause for if AI
            if action_trigger=='reload' 
            {
                action_trigger='';
                
                action_state='reloading';
                    inst_body.anim_countdown=-1;
                    inst_armR.anim_countdown=-1;
                    inst_armL.anim_countdown=-1;
                    inst_head.anim_countdown=-1;
                    inst_hat.anim_countdown=-1;
                    inst_weaponL.anim_countdown=-1;
                    inst_weaponR.anim_countdown=-1;
                
            }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>reloading state</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if action_state=='reloading'
    {
        var reload_speed=room_speed; 
        var anim_end=true;
        var peekempty=firearm_inventory_peeknextempty();
        if firearm_R[0]&gt;-1 &amp;&amp; firearm_R[1]&lt;=0
        {
        anim_end=false;
        }
        else if firearm_L[0]&gt;-1 &amp;&amp; firearm_L[1]&lt;=0
        {
        anim_end=false;
        firearm_R=firearm_L;
        firearm_L=create_array(-1,0);
        }
        else if peekempty[0]&gt;-1
        {
        anim_end=false;
        firearm_R=firearm_inventory_takenextempty();
        }
        
        if firearm_R[0]&gt;-1 
        {
            if !anim_end
            {
                reload_speed=get_firearm_reloadspeed(firearm_R[0]);
                with inst_body {anim_reloadR_1('body',reload_speed,false)}
                with inst_head {anim_reloadR_1('head',reload_speed,false)}
                with inst_armL {anim_reloadR_1('armL',reload_speed,false)}
                with inst_weaponL {anim_reloadR_1('weaponL',reload_speed,false)}
                with inst_armR {anim_end=!(anim_reloadR_1('armR',reload_speed,false))}
                with inst_weaponR {anim_reloadR_1('weaponR',reload_speed,false)}
            }
            
            
            
            if anim_end
            {
                
                if firearm_R[0]&gt;-1
                {
                firearm_R[1]=get_firearm_shots(firearm_R[0]);
                firearm_inventory_squish(firearm_R[0],firearm_R[1]);
                firearm_R=create_array(-1,0);
                }
            
            peekempty=firearm_inventory_peeknextempty(); //if there are still empty guns, keep the reload state going
                inst_body.anim_countdown=-1;
                inst_armR.anim_countdown=-1;
                inst_armL.anim_countdown=-1;
                inst_head.anim_countdown=-1;
                inst_weaponL.anim_countdown=-1;
                inst_weaponR.anim_countdown=-1;
                if peekempty[0]&gt;-1
                {
                action_state='reloading';//continue in the reloading state
                }
                else
                {
                action_state='idle';
                }
            
            }
        }
        else //an empty firearm couldn't be found in inventory.
        {
        action_state='idle'
        }
        //todo: we'll probably need a different reload anim for long guns.
        
        
    
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Toss State</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Toss away firearms state</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if action_state=='toss'
    {    
        var toss_speed=room_speed/8; //todo: replace with proper variables
        var toss_gunspeed=2;
        var toss_gunrotspeed=3;
        var toss_randomfactor=0.2;
        var anim_end=true;
        var throwleft=false;
        var throwright=false;
        if firearm_L[1]&lt;=0 &amp;&amp; firearm_L[0]&gt;-1
        {
            throwleft=true;
        }  
        if firearm_R[1]&lt;=0 &amp;&amp; firearm_R[0]&gt;-1
        {
            throwright=true;
        }
        
        if throwright||throwleft
        {
            with inst_body { anim_end= !(anim_toss('body',toss_speed,false))}
            with inst_head {anim_toss('head',toss_speed,false)}
        }
            
        if throwleft &amp;&amp; !anim_end
        {
            with inst_armL {anim_end=!(anim_toss('armL',toss_speed,false))}
            with inst_weaponL {anim_toss('weaponL',toss_speed,false)}
        }
            
        if throwright &amp;&amp; !anim_end
        {
            with inst_armR {anim_end=!(anim_toss('armR',toss_speed,false))}
            with inst_weaponR {anim_toss('weaponR',toss_speed,false)}
        }
        
        if anim_end
        {
                if throwleft
                {
                        var dir=point_direction(x,y,inst_weaponL.x,inst_weaponL.y);
                        var firearm_toss=create_array(firearm_L[0],firearm_L[1]);
                         with inst_weaponL
                         {
                         inst_tossgun= instance_create(x,y,obj_tossedgun);
                         inst_tossgun.initial_speed=toss_gunspeed *random_range(1-toss_randomfactor,1+toss_randomfactor);
                         inst_tossgun.initial_rot_speed=toss_gunrotspeed *random_range(1-toss_randomfactor,1+toss_randomfactor);
                         inst_tossgun.sprite_index=sprite_index;
                         inst_tossgun.image_yscale=image_yscale;
                         inst_tossgun.image_xscale=image_xscale;
                         inst_tossgun.spriteangle=spriteangle;
                         inst_tossgun.direction=dir;
                         inst_tossgun.firearm_id=firearm_toss[0];
                         inst_tossgun.shots=firearm_toss[1];
                         }
                         firearm_L=create_array(-1,0); //reset firearm to 'null' state.
                }    
                if throwright
                {
                        var dir=point_direction(x,y,inst_weaponR.x,inst_weaponR.y);
                        var firearm_toss=create_array(firearm_R[0],firearm_R[1]);
                         with inst_weaponR
                         {
                         inst_tossgun= instance_create(x,y,obj_tossedgun);
                         inst_tossgun.initial_speed=toss_gunspeed *random_range(1-toss_randomfactor,1+toss_randomfactor);
                         inst_tossgun.initial_rot_speed=toss_gunrotspeed *random_range(1-toss_randomfactor,1+toss_randomfactor);
                         inst_tossgun.sprite_index=sprite_index;
                         inst_tossgun.image_yscale=image_yscale;
                         inst_tossgun.image_xscale=image_xscale;
                         inst_tossgun.spriteangle=spriteangle;
                         inst_tossgun.direction=dir;
                         inst_tossgun.firearm_id=firearm_toss[0];
                         inst_tossgun.shots=firearm_toss[1];
                         }
                         firearm_R=create_array(-1,0); //reset firearm to 'null' state.
                }  
            movement_state='idle';
            action_state='idle';
            inst_body.anim_countdown=-1;
            inst_armR.anim_countdown=-1;
            inst_armL.anim_countdown=-1;
            inst_head.anim_countdown=-1;
            inst_weaponL.anim_countdown=-1;
            inst_weaponR.anim_countdown=-1;
            inst_hat.anim_countdown=-1;
         }
     }   
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Draw State</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Drawing State (General) &amp; Enter Aiming</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if action_state=='drawing'
    {
        //todo: replace this with a proper stat
        var draw_speed=room_speed/4;
        var _anim_variant=anim_variant;
        switch shoot_substate
        {
            case 'left':
                with inst_armR {anim_toidle('armR',draw_speed,false)}
                with inst_armL {anim_aimL_variant('armL',draw_speed,false,_anim_variant)}
                with inst_body {anim_aimL_variant('body',draw_speed,false,_anim_variant)}
                with inst_head {anim_aimL_variant('head',draw_speed,false,_anim_variant)}
                with inst_weaponL {anim_aimL_variant('weaponL',draw_speed,false,_anim_variant)}
                if inst_armL.anim_countdown&lt;=0
                {action_state='aiming';}
            break;
            case 'right':
                with inst_armL {anim_toidle('armL',draw_speed,false)}
                with inst_armR {anim_aimR_variant('armR',draw_speed,false,_anim_variant)}
                with inst_body {anim_aimR_variant('body',draw_speed,false,_anim_variant)}
                with inst_head {anim_aimR_variant('head',draw_speed,false,_anim_variant)}
                with inst_weaponR {anim_aimR_variant('weaponR',draw_speed,false,_anim_variant)}
                if inst_armR.anim_countdown&lt;=0
                {action_state='aiming';}
            break;
            case 'both':
                with inst_armR {anim_aimB_variant('armR',draw_speed,false,_anim_variant)}
                with inst_armL {anim_aimB_variant('armL',draw_speed,false,_anim_variant)}
                with inst_body {anim_aimB_variant('body',draw_speed,false,_anim_variant)}
                with inst_head {anim_aimB_variant('head',draw_speed,false,_anim_variant)}
                with inst_weaponR {anim_aimB_variant('weaponR',draw_speed,false,_anim_variant)}
                with inst_weaponL {anim_aimB_variant('weaponL',draw_speed,false,_anim_variant)}
                if inst_armR.anim_countdown&lt;=0 &amp;&amp; inst_armL.anim_countdown&lt;=0 
                {action_state='aiming';}
            break;
            case 'long':
                with inst_armR {anim_aimLo_variant('armR',draw_speed,false,_anim_variant)}
                with inst_armL {anim_aimLo_variant('armL',draw_speed,false,_anim_variant)}
                with inst_body {anim_aimLo_variant('body',draw_speed,false,_anim_variant)}
                with inst_head {anim_aimLo_variant('head',draw_speed,false,_anim_variant)}
                with inst_weaponR {anim_aimLo_variant('weaponR',draw_speed,false,_anim_variant)}
                with inst_weaponL {anim_aimLo_variant('weaponL',draw_speed,false,_anim_variant)}
                if inst_armR.anim_countdown&lt;=0 &amp;&amp; inst_armL.anim_countdown&lt;=0 
                {action_state='aiming';}
            break;
        }

    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Enter Drawing State / Empty State</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if weapon_mode=='gun'
    {
        if canDrawFirearm()
        {
 
                if (action_trigger=='draw') 
                {
                    action_trigger='';
                    if reload_style=='toss' &amp;&amp; ( (firearm_L[0]&gt;-1 &amp;&amp; firearm_L[1]&lt;=0)||(firearm_R[0]&gt;-1 &amp;&amp; firearm_R[1]&lt;=0))
                    {       
                         // draw state has been called, character has spent pistols in hand. 
                         //If Reload style is to toss, so directs character to toss state instead before firestate can start on next step
                        {
                            action_state='toss';
                        inst_body.anim_countdown=-1;
                        inst_armR.anim_countdown=-1;
                        inst_armL.anim_countdown=-1;
                        inst_head.anim_countdown=-1;
                        inst_hat.anim_countdown=-1;
                        inst_weaponL.anim_countdown=-1;
                        inst_weaponR.anim_countdown=-1;
                        }
                    }
                    else if !firearm_fullinventory_anyshots()
                    {
                        
                        action_state='drawempty'
                        inst_body.anim_countdown=-1;
                        inst_armR.anim_countdown=-1;
                        inst_armL.anim_countdown=-1;
                        inst_head.anim_countdown=-1;
                        inst_hat.anim_countdown=-1;
                        inst_weaponL.anim_countdown=-1;
                        inst_weaponR.anim_countdown=-1;
                    }
                    else
                    {
                        action_state='drawing';
                        anim_variant=ceil(random(3));
                        inst_body.anim_countdown=-1;
                        inst_armR.anim_countdown=-1;
                        inst_armL.anim_countdown=-1;
                        inst_head.anim_countdown=-1;
                        inst_hat.anim_countdown=-1;
                        inst_weaponL.anim_countdown=-1;
                        inst_weaponR.anim_countdown=-1;
                        
    
                        var next_firearm=0
                        if firearm_R[1]&gt;0
                        {
                         next_firearm=firearm_R;
                        }
                        else if firearm_L[1]&gt;0
                        {
                         next_firearm=firearm_L;
                        }
                        else
                        {
                        next_firearm=firearm_inventory_peeknext();   
                        }
                        
                        if get_firearm_islong(next_firearm[0])
                        {
                        shoot_substate='long';
                        }
                        else if shootakimbo &amp;&amp; firearm_fullinventory_getlength()&gt;1
                        {
                        shoot_substate='both';
                        }
                        else
                        {
                            if firearm_L[1]&gt;0 //if a gun's full ammo has not been expended, reuse it.
                            {
                            shoot_substate='left';
                            }
                            else if firearm_R[1]&gt;0
                            {
                            shoot_substate='right';
                            }
                            else if random(2)&gt;1
                            {
                            shoot_substate='left';
                            }
                            else
                            {
                            shoot_substate='right';
                            }
                        }
                        
                        
                        //readd spent pistols to the inventory if reload style is not to toss spent guns
                        if reload_style&lt;&gt;'toss'
                        {
                            switch shoot_substate
                            {
                                case 'left':
                                if firearm_L[0]&gt;-1 &amp;&amp; firearm_L[1]&lt;=0 //readd spent pistols to the inventory.
                                {
                                    firearm_inventory_add(firearm_L[0],firearm_L[1]);
                                    firearm_L=create_array(-1,0);
                                }
                                case 'right':
                                if firearm_R[0]&gt;-1 &amp;&amp; firearm_R[1]&lt;=0 //readd spent pistols to the inventory.
                                {
                                    firearm_inventory_add(firearm_R[0],firearm_R[1]);
                                    firearm_R=create_array(-1,0);
                                }
                                default: //covers cases 'both' and 'long'
                                
                                if firearm_L[0]&gt;-1 &amp;&amp; firearm_L[1]&lt;=0 //readd spent pistols to the inventory.
                                {
                                    firearm_inventory_add(firearm_L[0],firearm_L[1]);
                                    firearm_L=create_array(-1,0);
                                }
                                if firearm_R[0]&gt;-1 &amp;&amp; firearm_R[1]&lt;=0 //readd spent pistols to the inventory.
                                {
                                    firearm_inventory_add(firearm_R[0],firearm_R[1]);
                                    firearm_R=create_array(-1,0);
                                }
                            
                            }
                        } 
                        
                        
                       
                         //todo: debug remove this line, debug
                        //shoot_substate='left';
                        
                        if shoot_substate=='left'||shoot_substate=='both'
                        {
                            if firearm_L[1]&gt;0
                            {
                            //if previously used firearm still has shots, reuse it, i.e. do nothing.
                            }
                            else
                            {
                            firearm_L=firearm_inventory_takenext();
                            }
                            if firearm_L[0]&gt;-1
                            {
                            inst_weaponL.sprite_index=get_firearm_sprite(firearm_L[0]);
                            }
                        }
                        if shoot_substate=='right'||shoot_substate=='both'||shoot_substate=='long'
                        {
                            if firearm_R[1]&gt;0
                            {
                            //if previously used firearm still has shots, reuse it. i.e. do nothing
                            }
                            else
                            {
                            firearm_R=firearm_inventory_takenext();
                            }
                            if firearm_R[0]&gt;-1
                            {
                            inst_weaponR.sprite_index=get_firearm_sprite(firearm_R[0]);
                            }
                        }
                    }
                
                }
    
            }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>DrawEmpty State</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Empty (No Firearms) State</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if action_state=='drawempty'
    {
                var drawempty_speed=room_speed/2; //todo, make proper variable
                var anim_end=false;
                with inst_armL {anim_end=!(anim_drawempty('armL',drawempty_speed,false))}
                with inst_armR {anim_drawempty('armR',drawempty_speed,false)}
                with inst_body {anim_drawempty('body',drawempty_speed,false)}
                with inst_head {anim_drawempty('head',drawempty_speed,false)}
                with inst_weaponL {anim_drawempty('weaponL',drawempty_speed,false)}
                with inst_weaponR {anim_drawempty('weaponR',drawempty_speed,false)}
                
                if anim_end &amp;&amp;( (control=='player'&amp;&amp;!check_action_weapon())||control=='ai')
                {
                inst_body.anim_countdown=-1;
                inst_armR.anim_countdown=-1;
                inst_armL.anim_countdown=-1;
                inst_head.anim_countdown=-1;
                inst_hat.anim_countdown=-1;
                inst_weaponL.anim_countdown=-1;
                inst_weaponR.anim_countdown=-1;
                action_state='idle';
                }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Firing State</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Firing State (General)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if action_state=='firing'
    {
    
        var fire_duration_L=get_firearm_fireduration(0);
        var bullet_speed_L=get_firearm_bulletspeed(0); //load some default values here to negate stupid errors.
    
        var fire_duration_R=get_firearm_fireduration(0);
        var bullet_speed_R=get_firearm_bulletspeed(0); //load some default values here to negate stupid errors.
        
        var _anim_variant=anim_variant;
        
        
        //todo: add proper fire duration variables.
        if firearm_L[0]&gt;-1
        {
        fire_duration_L=get_firearm_fireduration(firearm_L[0]);
        bullet_speed_L=get_firearm_bulletspeed(firearm_L[0]);
        
        }        
        if firearm_R[0]&gt;-1
        {
        fire_duration_R=get_firearm_fireduration(firearm_R[0]);
        bullet_speed_R=get_firearm_bulletspeed(firearm_R[0]);
        }


        
        
        var my_id=id;
        
        //defining where the bullets will spawn
        var projectile_spawn_L_x=0;
        var projectile_spawn_L_y=0;
        var projectile_spawn_R_x=0;
        var projectile_spawn_R_y=0;
        with inst_weaponL
        {
        projectile_spawn_L_x=x+orbital_x(projectile_spawn_x,projectile_spawn_y,spriteangle);
        projectile_spawn_L_y=y+orbital_y(projectile_spawn_x,projectile_spawn_y,spriteangle);
        }       
        with inst_weaponR
        {
        projectile_spawn_R_x=x+orbital_x(projectile_spawn_x,projectile_spawn_y,spriteangle);
        projectile_spawn_R_y=y+orbital_y(projectile_spawn_x,projectile_spawn_y,spriteangle);
        }
        
            /*This gets a bit tricky. This state toggle is meant to check and revert as below*/
            /*If we have entered the firing state and have not started, start and reset animation*/
            /*while firing is true, play the firing animation, and pass back that firing has ended when animation ends*/
            /*also you must not fire again if the number of shots remaining in the firearm is 0*/
            if (shoot_substate=='left'||shoot_substate=='both')
            {
                if !firing_L &amp;&amp; firearm_L[1]&gt;0
                {   
                    if !get_firearm_selectivefire(firearm_L[0]) || (control=='player' &amp;&amp; !check_action_weapon() ) || control=='ai' //todo: add some clause for selective firing for AI
                    {
                        firing_L=true;
                        inst_weaponL.anim_countdown=-1;
                        inst_armL.anim_countdown=-1;
                        inst_body.anim_countdown=-1;
                        inst_head.anim_countdown=-1;
                        //todo: muzzle flash sfx
                        var firearm_id=firearm_L[0];
                        var projectile_type=get_firearm_projectiletype(firearm_id);
                        var projectiles=get_firearm_projectiles(firearm_id);
                        var range=get_firearm_range(firearm_id);
                        var knockback=get_firearm_knockback(firearm_id);
                        var ricochets=get_firearm_ricochets(firearm_id);
                        ricochets+=ricochet_modifier;
                        for (var i=0; i&lt;array_height_2d(projectiles);i++) //spawn all projectiles from shot e.g. big spread from a blunderbuss
                            {
                                var x_offset=orbital_x(projectiles[i,0],projectiles[i,1],inst_weaponL.spriteangle);
                                var y_offset=orbital_y(projectiles[i,0],projectiles[i,1],inst_weaponL.spriteangle);
                                var inst_bullet=instance_create(projectile_spawn_L_x+x_offset,projectile_spawn_L_y+y_offset,projectile_type);
                                var corrective_offset=0;
                                if control=='player'
                                {
                                corrective_offset=point_direction(inst_weaponL.x,inst_weaponL.y,mouse_x,mouse_y)-inst_weaponL.spriteangle;
                                }
                                else if control=='ai'
                                {
                                    if action_target&lt;&gt;noone
                                    {
                                    corrective_offset=point_direction(inst_weaponL.x,inst_weaponL.y,action_target.x,action_target.y)-inst_weaponL.spriteangle;
                                    }
                                }
                                inst_bullet.range=range;  
                                inst_bullet.knockback=knockback;
                                inst_bullet.ricochets=ricochets;
                                inst_bullet.faction_id=faction_id;
                                if !inst_bullet.hit_detected
                                            {
                                inst_bullet._speed=bullet_speed_L; 
                                            }
                                
                                inst_bullet.direction=id.spriteangle+projectiles[i,2]; 
                                if abs(corrective_offset)&lt;5
                                {
                                inst_bullet.direction+=corrective_offset;
                                }
                                 
                                 
                                //inst_bullet.direction=inst_weaponL.spriteangle+projectiles[i,2]; 
                            }
                        firearm_L[1]-=1; //reduce number of shots in firearm by one
                    }
                }
                else
                {
                    switch shoot_substate
                    {
                    case 'left':
                    with inst_weaponL { my_id.firing_L=anim_fireL_variant('weaponL',fire_duration_L,false,_anim_variant)};
                    with inst_armL { anim_fireL_variant('armL',fire_duration_L,false,_anim_variant)};
                    with inst_body { anim_fireL_variant('body',fire_duration_L,false,_anim_variant)};
                    with inst_head { anim_fireL_variant('head',fire_duration_L,false,_anim_variant)};
                    break;
                    case 'both':
                    //todo: need anims for firing both pistols at once
                    with inst_weaponL { my_id.firing_L=anim_fireB_variant('weaponL',fire_duration_L,false,_anim_variant)};
                    with inst_armL { anim_fireB_variant('armL',fire_duration_L,false,_anim_variant)};
                    with inst_body { anim_fireB_variant('body',fire_duration_L,false,_anim_variant)};
                    with inst_head { anim_fireB_variant('head',fire_duration_L,false,_anim_variant)};
                    break;
                    }
                    
                }
                
            
            }
            if (shoot_substate=='right'||shoot_substate=='both'||shoot_substate=='long')
            {

                if !firing_R &amp;&amp; firearm_R[1]&gt;0 
                {   
                    if !get_firearm_selectivefire(firearm_R[0]) || (control=='player' &amp;&amp; !check_action_weapon() ) || control=='ai' //todo: add some clause for selective firing for AI
                    {
                        var firedelay_done=true;
                        if shoot_substate='both'
                        {
                        firedelay_done=(fire_delay_R&gt;=fire_duration_L/2); //require that the fire delay has reached the correct level
                        }

                        if (firedelay_done)
                            {
                                firing_R=true;
                                inst_weaponR.anim_countdown=-1;
                                inst_armR.anim_countdown=-1;
                                if (shoot_substate&lt;&gt;'both') //this clause is to catch a little bug where the anim for the body would reset too soon when both guns are firing at different durations
                                {
                                inst_body.anim_countdown=-1;
                                inst_head.anim_countdown=-1;
                                }
                                if (shoot_substate=='long')
                                {
                                inst_weaponL.anim_countdown=-1;
                                inst_armL.anim_countdown=-1;
                                }
                                
                                    //todo: check this later to see if should be revived or deleted
                                    /*var original_spriteangle=inst_weaponR.spriteangle;
                                    if (shoot_substate=='both')
                                    {
                                    //inst_weaponR.spriteangle-=inst_armR.anim_spriteangle; //bandaid fix for an error with animations causing erratic bullet firing.
                                    inst_weaponR.spriteangle=id.spriteangle;
                                    }*/
                
                                //todo: muzzle flash sfx
                                var firearm_id=firearm_R[0];
                                var projectile_type=get_firearm_projectiletype(firearm_id);
                                var projectiles=get_firearm_projectiles(firearm_id);
                                var range=get_firearm_range(firearm_id);
                                var knockback=get_firearm_knockback(firearm_id);
                                var ricochets=get_firearm_ricochets(firearm_id);
                                ricochets+=ricochet_modifier;
                                for (var i=0; i&lt;array_height_2d(projectiles);i++) //spawn all projectiles from shot e.g. big spread from a blunderbuss
                                    {
                                        var x_offset=orbital_x(projectiles[i,0],projectiles[i,1],inst_weaponR.spriteangle);
                                        var y_offset=orbital_y(projectiles[i,0],projectiles[i,1],inst_weaponR.spriteangle);
                                        var inst_bullet=instance_create(projectile_spawn_R_x+x_offset,projectile_spawn_R_y+y_offset,projectile_type);

                                        var corrective_offset=0;
                                        if control=='player'
                                        {
                                        corrective_offset=point_direction(inst_weaponR.x,inst_weaponR.y,mouse_x,mouse_y)-inst_weaponR.spriteangle;
                                        }                            
                                        else if control=='ai'
                                        {
                                            if action_target&lt;&gt;noone
                                            {
                                            corrective_offset=point_direction(inst_weaponR.x,inst_weaponR.y,action_target.x,action_target.y)-inst_weaponR.spriteangle;
                                            //todo: this might not work perfectly in practice, review.
                                            }
                                        }
                                        
                                        inst_bullet.range=range;  
                                        inst_bullet.knockback=knockback;
                                        inst_bullet.ricochets=ricochets;
                                        inst_bullet.faction_id=faction_id;
                                        if !inst_bullet.hit_detected
                                        {
                                        inst_bullet._speed=bullet_speed_R;
                                        } //todo: change bullet speed
                                        inst_bullet.direction=id.spriteangle+projectiles[i,2]; //todo: check if this needs changing later, bullet direction fixed to character facing direction, may not suit all cases...
                                        
                                        if abs(corrective_offset)&lt;5
                                        {
                                        inst_bullet.direction+=corrective_offset;
                                        }

                                        
                                    }
                                firearm_R[1]-=1; //reduce number of shots in firearm by one
                        }
                   }
                   else
                   {
                   fire_delay_R=0; //reset the fire_delay_R variable if selective fire has been invoked.
                   }
                }
                else
                {
                    switch shoot_substate
                    {
                    case 'right':
                    with inst_weaponR { my_id.firing_R=anim_fireR_variant('weaponR',fire_duration_R,false,_anim_variant)};
                    with inst_armR { anim_fireR_variant('armR',fire_duration_R,false,_anim_variant)};
                    with inst_body { anim_fireR_variant('body',fire_duration_R,false,_anim_variant)};
                    with inst_head { anim_fireR_variant('head',fire_duration_R,false,_anim_variant)}; 
                    break;
                    case 'both':
                    with inst_weaponR { my_id.firing_R=anim_fireB_variant('weaponR',fire_duration_R,false,_anim_variant)};
                    with inst_armR { anim_fireB_variant('armR',fire_duration_R,false,_anim_variant)};
                    break;
                    case 'long':
                    with inst_weaponR { my_id.firing_R=anim_fireLo_variant('weaponR',fire_duration_R,false,_anim_variant)};
                    with inst_armR { anim_fireLo_variant('armR',fire_duration_R,false,_anim_variant)};
                    with inst_weaponL { anim_fireLo_variant('weaponL',fire_duration_R,false,_anim_variant)};
                    with inst_armL { anim_fireLo_variant('armL',fire_duration_R,false,_anim_variant)};
                    with inst_body { anim_fireLo_variant('body',fire_duration_R,false,_anim_variant)};
                    with inst_head { anim_fireLo_variant('head',fire_duration_R,false,_anim_variant)}; 
                    break;
                    }
                    
                    
                }
                
            
            }
            
            
            if shoot_substate=='both'
            {
                if fire_delay_R&lt;fire_duration_L/2
                {
                fire_delay_R++;
                }
            }
 
        }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Exit Firing State</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if action_state=='firing'
    {
           var exit_state = false;
            
            switch shoot_substate
            {
            case 'left':
                if !firing_L &amp;&amp; firearm_L[1]&lt;=0
                {
                exit_state=true;
                }
            break;
            case 'right':
                if !firing_R &amp;&amp; firearm_R[1]&lt;=0
                {
                exit_state=true;
                }
            break;
            case 'both':
                if !firing_L &amp;&amp; firearm_L[1]&lt;=0 &amp;&amp; !firing_R &amp;&amp; firearm_R[1]&lt;=0
                {
                exit_state=true;
                }
            break;
            case 'long':
                if !firing_R &amp;&amp; firearm_R[1]&lt;=0
                {
                exit_state=true;
                }
            break;
            }
            if exit_state
            {
            movement_state='idle';
            
                if reload_style=='toss'
                {
                action_state='toss';
                }
                else
                {
                action_state='idle';
                    if firearm_L[0]&gt;-1  //if firing has ended, readd both empty firearms to the inventory.
                    {
                        firearm_inventory_add(firearm_L[0],firearm_L[1]);
                        firearm_L=create_array(-1,0);
                    }
                    if firearm_R[0]&gt;-1
                    {
                        firearm_inventory_add(firearm_R[0],firearm_R[1]);
                        firearm_R=create_array(-1,0);
                    }
                }
                
            inst_body.anim_countdown=-1;
            inst_armR.anim_countdown=-1;
            inst_armL.anim_countdown=-1;
            inst_head.anim_countdown=-1;
            inst_weaponL.anim_countdown=-1;
            inst_weaponR.anim_countdown=-1;
            inst_hat.anim_countdown=-1;
            }

    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Enter Firing State</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if canFire()
    {
            if action_trigger=='fire'
            {
            action_trigger='';
            firing_L=false;
            firing_R=false;
            action_state='firing';
            inst_body.anim_countdown=-1;
            inst_armR.anim_countdown=-1;
            inst_armL.anim_countdown=-1;
            inst_head.anim_countdown=-1;
            inst_weaponL.anim_countdown=-1;
            inst_weaponR.anim_countdown=-1;
            fire_delay_R=0;
            
            }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Death State</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>initialise death state</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause 
{
    if canDie()
    {
        if hitpoints&lt;=0
        {
        action_state='dead';
        movement_state='dead';

            inst_body.anim_countdown=-1;
            inst_armR.anim_countdown=-1;
            inst_armL.anim_countdown=-1;
            inst_head.anim_countdown=-1;
            inst_hat.anim_countdown=-1;
            inst_weaponL.anim_countdown=-1;
            inst_weaponR.anim_countdown=-1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dead state</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
        if action_state=='dead'
        {
        var anim_end=true;
        var death_speed=room_speed;//todo: replace with proper variable?
        
            with inst_body {anim_end=!(anim_dead('body',death_speed,false))}
            with inst_head {anim_dead('head',death_speed,false)}
            with inst_hat {anim_dead('hat',death_speed,false)}
            with inst_armL {anim_dead('armL',death_speed,false)}
            with inst_weaponL {anim_dead('weaponL',death_speed,false)}
            with inst_armR {anim_dead('armR',death_speed,false)}
            with inst_weaponR {anim_dead('weaponR',death_speed,false)}
            
            dead=true;
        //todo: there should probably be a statement for the player being dead
        
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Idle state</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>return to idle state</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if action_trigger=='idle'
    {
    action_trigger='';
    action_state='idle';
    }
    if action_state=='idle' &amp;&amp; (movement_state=='idle'||movement_state=='walking') //todo: maybe there'll be a seperate animation for walking while idle.
    {
        if inst_body.anim_countdown&lt;&gt;0
        {
            var idle_speed=room_speed/8; //todo: replace with proper variable
            with inst_body { anim_toidle('body',idle_speed,false);};
            with inst_armL { anim_toidle('armL',idle_speed,false);};
            with inst_armR { anim_toidle('armR',idle_speed,false);};
            with inst_head { anim_toidle('head',idle_speed,false);};
            with inst_weaponL { anim_toidle('weaponL',idle_speed,false);};
            with inst_weaponR { anim_toidle('weaponR',idle_speed,false);};
            
        }
    }
    //todo: idle while using a melee weapon will have different animations.

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Idle or Dead Cancel Movement</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if !canMove() || movement_state=='idle'
    {
            moveStop();
            if abs(xspeed)&gt;0.1
           {
           xspeed*=weight_modifier;
           }
           else
           {
           xspeed=0;
           }
           
           if abs(yspeed)&gt;0.1
           {
           yspeed*=weight_modifier;
           }
           else
           {
           yspeed=0;
           }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>knockback and stun</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Knockback</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if knockback_counter&gt;stun_max
    {
    knockback_counter=stun_max;
    }
    if knockback_counter&gt;0
    {
    knockback_counter-=1;
    }
    if knockback_counter&lt;0
    {
    knockback_counter=0;
    }
    knockback_speed=knockback_counter*10*(1/room_speed);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Stunned State (General)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if !dead
    {
        if canStun()
        {
        
            if knockback_counter&gt;=stun_threshold
            {
                action_state='stunned';    
                movement_state='stunned';   
                inst_body.anim_countdown=-1;
                inst_armR.anim_countdown=-1;
                inst_armL.anim_countdown=-1;
                inst_head.anim_countdown=-1;
                inst_weaponL.anim_countdown=-1;
                inst_weaponR.anim_countdown=-1;
                inst_hat.anim_countdown=-1;
                //todo: there should probably be a stunned animation here or something
            }
        
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Exit stunned state</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if action_state=='stunned'||movement_state=='stunned'
    {
        if knockback_counter&lt;=0
        {
        action_state='idle';
        movement_state='idle';
            inst_body.anim_countdown=-1;
            inst_armR.anim_countdown=-1;
            inst_armL.anim_countdown=-1;
            inst_head.anim_countdown=-1;
            inst_hat.anim_countdown=-1;
            inst_weaponL.anim_countdown=-1;
            inst_weaponR.anim_countdown=-1;
        }
    
    }


}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Melee</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Clear Melee Modifiers</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if action_state&lt;&gt;'meleeing'
    {
        if instance_exists(inst_melee_hitbox)
        {
            with inst_melee_hitbox
            {
            instance_destroy();
            }
            inst_melee_hitbox=noone;
        }
        melee_speed=0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Change weapon mode</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if control=='player'
    {
        if (check_action_changeweapon_pressed())
        {
            switch (weapon_mode)
            {
            case 'gun':
            weapon_mode='melee';
            break;
            case 'melee':
            weapon_mode='gun';
            break;
            default:
            weapon_mode='gun';
            break;
            }
        }
    }
    else
    {
        if action_trigger='equipmelee'
        {
            weapon_mode='melee';
        }
        if action_trigger='equipgun'
        {
            weapon_mode='gun';
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Start Melee state</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if canMelee()
    {
        if (action_trigger=='melee')
        {
        action_trigger='';
        action_state='meleeing';
        movement_state='meleeing';
        inst_body.anim_countdown=-1;
        inst_armR.anim_countdown=-1;
        inst_armL.anim_countdown=-1;
        inst_head.anim_countdown=-1;
        inst_weaponL.anim_countdown=-1;
        inst_weaponR.anim_countdown=-1;
        inst_hat.anim_countdown=-1;
        //todo: refactor this line to pull from the character's inventory
        var melee_id=0;
        var melee_sprite=get_melee_sprite(melee_id);
        inst_weaponR.sprite_index=melee_sprite;
        
        melee_duration=get_melee_duration(melee_id);
        
        inst_melee_hitbox=instance_create(x,y,obj_melee_hitbox);
        inst_melee_hitbox.attach_point_x=20;
        inst_melee_hitbox.attach_point_y=0;
        inst_melee_hitbox.inst_parent=id;
        inst_melee_hitbox.damage=get_melee_damage(melee_id);
        inst_melee_hitbox.width_modifer=get_melee_wmodifier(melee_id);
        inst_melee_hitbox.height_modifer=get_melee_hmodifier(melee_id);
        inst_melee_hitbox.knockback=get_melee_knockback(melee_id);
        inst_melee_hitbox.lifespan=melee_duration;
        inst_melee_hitbox.faction_id=faction_id;
        melee_speed=max_melee_speed;
        melee_direction=spriteangle;
        melee_input_held=true;
        
        }
    
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Melee State Action</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if action_state='meleeing'
    {

                var melee_dur=melee_duration;
                var anim_end=false;
                //todo: animation variants for different weapons/attack sequences
                with inst_armR {anim_end=!(anim_melee_sword_1('armR',melee_dur,false))}
                with inst_armL {anim_melee_sword_1('armL',melee_dur,false)}
                with inst_body {anim_melee_sword_1('body',melee_dur,false)}
                with inst_head {anim_melee_sword_1('head',melee_dur,false)}
                with inst_weaponR {anim_melee_sword_1('weaponR',melee_dur,false)}
                with inst_weaponL {anim_melee_sword_1('weaponL',melee_dur,false)}
                with inst_hat {anim_melee_sword_1('hat',melee_dur,false)}
                
                //todo: we need collision and damage detection for melee
                //melee collisions will need a grace period, equal to the melee duration
                //todo: melee motion trails
                
                
                if anim_end
                {
                    movement_state='idle';
                    melee_speed=0;
                    action_state='idle';
                    inst_body.anim_countdown=-1;
                    inst_armR.anim_countdown=-1;
                    inst_armL.anim_countdown=-1;
                    inst_head.anim_countdown=-1;
                    inst_weaponL.anim_countdown=-1;
                    inst_weaponR.anim_countdown=-1;
                    inst_hat.anim_countdown=-1;
                    
                    with inst_melee_hitbox
                    {
                    instance_destroy();
                    }
                    inst_melee_hitbox=noone;
                }
                
                
    
    
    }


}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Melee State Motion</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if movement_state=='meleeing'
    {
            max_speed=max_melee_speed;
            
            
            
           if path_exists(path)
           {
           path_clear_points(path);
           } 
            if melee_speed&gt;0
            {

            melee_speed-=(max_melee_speed/melee_duration);
            }
            else
            {
            melee_speed=0;
            }
           
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Melee Grace Period</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !pause
{
    if grace_period&gt;0
    {
    grace_period-=1;
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>AI Thinking States</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>idle</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !dead
{
    if !pause
    {
        if control == 'ai'
        {
            if thinking_state == 'idle'
            {
            
            //todo
            //Random patrols?
            //Idle animations? 
            //Interacting with props?
            
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Attack</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !dead
{
    if !pause
    {
        if control == 'ai'
        {
            if thinking_state == 'attack'
            {
                choose_action_target();
                if instance_exists(action_target)
                {
                    if  firearm_fullinventory_anyshots()
                    {
                    behaviour_state='moveandshoot';
                    }
                    else if point_distance(x,y,action_target.x,action_target.y)&lt;5 //todo, replace with a variable that is based on enemy stats
                    {
                    behaviour_state='moveandmelee';
                    }
                    else
                    {
                    behaviour_state='coverandreload';
                    //todo: there will be more factors at work here.
                    //Some enemies will always try for melee after running out of bullets.
                    //Some enemies won't bother going for cover.                    
                    }
                }
                else
                {
                thinking_state='idle';
                behaviour_state='idle';
                }
            
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Defend</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !dead
{
    if !pause
    {
        if control == 'ai'
        {
            if thinking_state == 'defend'
            {
                
                choose_defense_target();
                if action_target&lt;&gt;noone
                {
                    if firearm_fullinventory_anyshots()
                    {
                    behaviour_state='holdandshoot';
                    }
                    else
                    {
                    behaviour_state='holdandreload';
                    //todo: there will be more factors at work here.
                    //Some enemies will always try for melee after running out of bullets.
                    //Some enemies won't bother going for cover.                    
                    }
                }
            
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>AI Firearm attack behaviour</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Move And Shoot</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !dead
{
    if !pause
    {
        if control=='ai'
        {
            if behaviour_state=='moveandshoot'
            {   
                faceTargetSmoothing(action_target,rotation_smoothing);
                
                if hasLineOfSight(action_target)&amp;&amp; inWeaponRange(action_target)
                {
                    moveStop();
                    if canDrawFirearm() 
                    {
                        action_trigger='draw';
                    }
                }
                else
                {
                    moveToTarget(action_target,max_speed);
                    //facePath(rotation_smoothing);
                }
                
                if canFire()
                {                   
                
                    if isFacingTargetThreshold(action_target,2)
                    {
                        if AIShootDelay&lt;=0
                        {
                            AIShootDelay= maxAIShootDelay;
                            action_trigger='fire';
                        }
                        else
                        {
                        AIShootDelay--;
                        }
                    }
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Hold and shoot</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !dead
{
    if !pause
    {
        if control=='ai'
        {
            if behaviour_state=='holdandshoot'
            {   
                moveStop();
                if hasLineOfSight(action_target)
                {
                    faceTargetSmoothing(action_target,rotation_smoothing);
                    
                    if canDrawFirearm() 
                    {
                        action_trigger='draw';
                    }
                }
                if canFire()
                {                   
                    if inWeaponRange(action_target)
                    {
                        if isFacingTargetThreshold(action_target,2)
                        {
                            if AIShootDelay&lt;=0
                            {
                                AIShootDelay= maxAIShootDelay;
                                action_trigger='fire';
                            }
                            else
                            {
                            AIShootDelay--;
                            }
                        }
                    }
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>AI Melee Behaviour</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Move And Melee</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !dead
{
    if !pause
    {
        if control=='ai'
        {
            if behaviour_state=='moveandmelee'
            {   
                faceTargetSmoothing(action_target,rotation_smoothing);
                
                if AIMeleeDelay&gt;0
                {
                    AIMeleeDelay--;
                }
                
                if point_distance(x,y,action_target.x,action_target.y)&lt;150  //todo: inMeleeRange function
                {
                    moveStop();
                    if canMelee() 
                    {
                        if AIMeleeDelay&lt;=0
                            {
                                AIMeleeDelay= maxAIMeleeDelay;
                                faceTarget(action_target);
                                action_trigger='melee';
                            }
                    }
                }
                else
                {
                    moveToTarget(action_target,max_speed);
                    //facePath(rotation_smoothing);
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>AI Cover behaviour</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Cover and Reload</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !dead
{
    if !pause
    {
        if control=='ai'
        {
            if behaviour_state=='coverandreload'
            {   
                if coverThrottle&lt;=0
                {
                            move_target = nearestValidCoverSpot();
                            action_target = move_target;
                            coverThrottle=maxCoverThrottle;
                }
                else
                {
                coverThrottle--;
                }
                
                if distance(action_target)&lt;10
                {
                    moveStop();
                    /*
                    if canReload()
                    {
                    action_trigger='reload';
                    }
                    */
                }
                else
                {
                    moveToTarget(action_target);
                }

            //todo
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
